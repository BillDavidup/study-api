<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">
<!-- 配置生成器，官网配置文档: http://mybatis.org/generator/index.html -->
<generatorConfiguration>

    <!-- 加载额外的依赖包 -->
    <classPathEntry location="src/main/resources/mybatis-generator/driver/mysql-connector-java-8.0.30.jar"/>

    <context id="mysql" defaultModelType="flat" targetRuntime="MyBatis3">

        <!-- 为model重写toString方法 lombok已经包含了
        <plugin type="org.mybatis.generator.plugins.ToStringPlugin"/>
         -->
        <!-- 为model使用builder模式构建对象-->
        <plugin type="com.softwareloop.mybatis.generator.plugins.LombokPlugin">
            <!-- enable annotations -->
            <property name="builder" value="true"/>
            <!-- annotation's option(boolean) -->
            <property name="builder.fluent" value="true"/>
            <!-- annotation's option(String) -->
            <property name="builder.builderMethodName" value="build"/>
            <property name="accessors" value="true"/>
            <!-- annotation's option(array of String) -->
            <property name="accessors.prefix" value="m_, _"/>
            <!-- disable annotations -->
            <property name="allArgsConstructor" value="true"/>
        </plugin>

        <commentGenerator>
            <!-- 是否不生成注释 -->
            <property name="suppressAllComments" value="false"/>
            <!-- 注释是否追加表COMMENT备注 -->
            <property name="addRemarkComments" value="true"/>
            <!-- 生成的注释是否去除时间戳 -->
            <property name="suppressDate" value="true"/>
            <!-- 生成的Java文件的编码 -->
            <property name="javaFileEncoding" value="UTF-8"/>
            <!-- 格式化java代码 -->
            <property name="javaFormatter" value="org.mybatis.generator.api.dom.DefaultJavaFormatter"/>
            <!-- 格式化XML代码 -->
            <property name="xmlFormatter" value="org.mybatis.generator.api.dom.DefaultXmlFormatter"/>
            <!-- 指明数据库的用于标记数据库对象名的符号，比如ORACLE就是双引号，MYSQL默认是`反引号； -->
            <property name="autoDelimitKeywords" value="true"/>
            <property name="beginningDelimiter" value="`"/>
            <property name="endingDelimiter" value="`"/>

        </commentGenerator>

        <!-- 必须：数据库连接配置 -->
        <jdbcConnection
                driverClass="com.mysql.cj.jdbc.Driver"
                connectionURL="jdbc:mysql://127.0.0.1:3306"
                userId="root"
                password="rrrrrrrr">
            <!-- 这里面可以设置property属性，每一个property属性都设置到配置的Driver上 -->
        </jdbcConnection>

        <!-- java类型处理器
            用于处理DB中的类型到Java中的类型，默认使用JavaTypeResolverDefaultImpl；
            注意一点，默认会先尝试使用Integer，Long，Short等来对应DECIMAL和 NUMERIC数据类型；
        -->
        <javaTypeResolver type="org.mybatis.generator.internal.types.JavaTypeResolverDefaultImpl">
            <!--
                true：使用BigDecimal对应DECIMAL和 NUMERIC数据类型
                false：默认,
                    scale>0;length>18：使用BigDecimal;
                    scale=0;length[10,18]：使用Long；
                    scale=0;length[5,9]：使用Integer；
                    scale=0;length<5：使用Short；
             -->
            <property name="forceBigDecimals" value="false"/>
        </javaTypeResolver>


        <!-- 生成表字段对应的model类
            targetPackage：生成的类要放的包，真实的包受enableSubPackages属性控制；
            targetProject：目标项目，指定一个存在的目录下，生成的内容会放到指定目录中，如果目录不存在，MBG不会自动建目录
         -->
        <javaModelGenerator targetPackage="com.dening.study.api.mybatis.dao.model"
                            targetProject="src/main/resources/mybatis-generator/generated-files">
            <!-- 在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个package下，默认为false -->
            <property name="enableSubPackages" value="true"/>
            <!-- 设置是否在getter方法中，对String类型字段调用trim()方法 -->
            <property name="trimStrings" value="true"/>
        </javaModelGenerator>


        <!-- 生成Mapper.xml-->
        <sqlMapGenerator targetPackage="com.dening.study.api.mybatis.dao"
                         targetProject="src/main/resources/mybatis-generator/generated-files">
            <!-- 在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个package下，默认为false -->
            <property name="enableSubPackages" value="true"/>
        </sqlMapGenerator>

        <!-- 生成Mapper.xml对应的接口-->
        <javaClientGenerator targetPackage="com.dening.study.api.mybatis.dao" type="XMLMAPPER"
                             targetProject="src/main/resources/mybatis-generator/generated-files">
            <!-- 在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个package下，默认为false -->
            <property name="enableSubPackages" value="true"/>

            <!-- 可以为所有生成的接口添加一个父接口，但是MBG只负责生成，不负责检查
            <property name="rootInterface" value=""/>
             -->
        </javaClientGenerator>

        <!-- 需要生成模板代码表配置 -->
        <table tableName="test_person"
               enableCountByExample="false"
               enableUpdateByExample="false"
               enableDeleteByExample="false"
               enableSelectByExample="false"
               selectByExampleQueryId="false">

            <!-- 参考 javaModelGenerator 的 constructorBased属性-->
            <property name="constructorBased" value="false"/>

            <!-- 默认为false，如果设置为true，在生成的SQL中，table名字不会加上catalog或schema； -->
            <property name="ignoreQualifiersAtRuntime" value="false"/>

            <!-- 生成的model配置父类 -->
            <!--<property name="rootClass" value="AbstractEntity"/>-->
            <!-- 生成的接口是否有父类 -->
            <!-- <property name="rootInterface" value="A"/> -->

        </table>
        <!-- 参考: https://blog.csdn.net/qq_33326449/article/details/105930655 -->
    </context>
</generatorConfiguration>